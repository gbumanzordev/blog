import{_ as a,c as e,o as s,a as n}from"./app.bf64a9c0.js";const y=JSON.parse('{"title":"Flujo de trabajo con Git Flow","description":"","frontmatter":{},"headers":[{"level":2,"title":"Instalacion","slug":"instalacion","link":"#instalacion","children":[]},{"level":2,"title":"Ramas master y develop","slug":"ramas-master-y-develop","link":"#ramas-master-y-develop","children":[]},{"level":2,"title":"Ramas por caracteristicas (feature branches)","slug":"ramas-por-caracteristicas-feature-branches","link":"#ramas-por-caracteristicas-feature-branches","children":[{"level":3,"title":"Terminar features:","slug":"terminar-features","link":"#terminar-features","children":[]}]},{"level":2,"title":"Ramas para lanzamiento:","slug":"ramas-para-lanzamiento","link":"#ramas-para-lanzamiento","children":[]},{"level":2,"title":"Ramas de mantenimiento (hotfix branch):","slug":"ramas-de-mantenimiento-hotfix-branch","link":"#ramas-de-mantenimiento-hotfix-branch","children":[{"level":3,"title":"Inicializar una rama de revisi\xF3n:","slug":"inicializar-una-rama-de-revision","link":"#inicializar-una-rama-de-revision","children":[]}]}],"relativePath":"getting-started.md"}'),o={name:"getting-started.md"},l=n(`<h1 id="flujo-de-trabajo-con-git-flow" tabindex="-1">Flujo de trabajo con Git Flow <a class="header-anchor" href="#flujo-de-trabajo-con-git-flow" aria-hidden="true">#</a></h1><p>En el desarrollo de software es muy importante llevar el control y una l\xEDnea de tiempo de lo que desarrollamos, por lo que un Sistema de Control de Versiones (VCS) es muy importante, pero en esta ocasi\xF3n m\xE1s que hablar del control de versiones como tal, me gustaria introducirlos a una metodolog\xEDa bastante popular para el desarrollo de software en equipo.</p><p>Gitflow es un conjunto de reglas o \u201Cest\xE1ndares\u201D para versionamiento que (a mi manera de verlo) la mayor\xEDa de los equipos deber\xEDan seguir al momento de desarrollar software colaborativo, es una de las m\xE1s populares y por lo tanto la que mejores valoraciones tiene. Empecemos.</p><h2 id="instalacion" tabindex="-1">Instalacion <a class="header-anchor" href="#instalacion" aria-hidden="true">#</a></h2><p>Para OSX podemos usar el siguiente comando:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">brew install git-flow</span></span>
<span class="line"></span></code></pre></div><p>Para instalar Git Flow en Windows, pueden seguir este enlace, ya que el instalador ya trae git flow incluido.</p><p>Para Linux, existen varias maneras que puedes investigar en l\xEDnea, para las distribuciones basadas en Debian/Ubuntu, puedes ejecutar el siguiente comando:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sudo apt-get install -y git-flow.</span></span>
<span class="line"></span></code></pre></div><p>Despu\xE9s de haber instalado git-flow lo \xFAnico que debemos hacer es dirigirnos al repositorio local de nuestro proyecto y ejecutar git flow init, este comando es una extensi\xF3n del comando git init y no va a cambiar nada en el repositorio excepto la creaci\xF3n de las ramas.</p><p>Una vez ejecutemos este comando, nos pedir\xE1 los nombres por defecto de las ramas principales para nuestro proyecto, podemos dejar los valores predeterminados y continuar, el resultado seria similar al siguiente:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ git flow init</span></span>
<span class="line"><span style="color:#A6ACCD;">Initialized empty Git repository </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">/project/.git/</span></span>
<span class="line"><span style="color:#A6ACCD;">No branches exist yet. Base branches must be created now.</span></span>
<span class="line"><span style="color:#A6ACCD;">Branch name </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> production releases: </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">master</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Branch name </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">next release</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> development: </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">develop</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">How to name your supporting branch prefixes</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">Feature branches</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">feature/</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Release branches</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">release/</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Hotfix branches</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">hotfix/</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Support branches</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">support/</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Version tag prefix</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">$ git branch</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> develop</span></span>
<span class="line"><span style="color:#A6ACCD;">  master</span></span>
<span class="line"></span></code></pre></div><p>Las ramas que se crearan al inicio ser\xE1n master y develop, profundicemos en ellas.</p><h2 id="ramas-master-y-develop" tabindex="-1">Ramas <code>master</code> y <code>develop</code> <a class="header-anchor" href="#ramas-master-y-develop" aria-hidden="true">#</a></h2><p>En lugar de solamente usar la rama master, este flujo de trabajo utiliza dos ramas para guardar el historial del proyecto. La rama master almacena el historial de lanzamientos oficiales, y la rama develop funciona como una rama de integraci\xF3n para nuevas caracter\xEDsticas en desarrollo, tambi\xE9n es conveniente etiquetar todos los commits que se hagan en la rama master con un n\xFAmero de versi\xF3n.</p><p>El primer paso es complementar la rama master con la rama develop, la manera m\xE1s sencilla es crear la rama develop y hacer push al repositorio en el servidor ejecutando los siguientes comandos:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git branch develop</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin develop</span></span>
<span class="line"></span></code></pre></div><p>Esa rama va a contener el historial completo del proyecto mientras que master va a contener una versi\xF3n reducida. A partir de este punto los compa\xF1eros de proyecto deber\xEDan clonar el repositorio central y crear una rama de seguimiento para la rama develop.</p><h2 id="ramas-por-caracteristicas-feature-branches" tabindex="-1">Ramas por caracteristicas (feature branches) <a class="header-anchor" href="#ramas-por-caracteristicas-feature-branches" aria-hidden="true">#</a></h2><p>Cada nueva caracter\xEDstica debe residir en su propia rama, la cual puede ser guardada en el repositorio remoto para respaldo o colaboraci\xF3n. Pero, en vez de ramificar desde master, las ramas feature usen develop como su rama padre. Cuando una caracter\xEDstica est\xE9 completa, debe ser combinada con develop. Las caracter\xEDsticas nunca deber\xEDan ir directamente a la rama master.</p><p>Tomen en cuenta que las ramas por caracter\xEDstica combinadas con la rama de desarrollo (develop) cumplen el prop\xF3sito de ramificaci\xF3n por feature, pero el flujo de trabajo git flow no termina ah\xED.</p><p>Para crear una rama por caracter\xEDstica, sin usar la herramienta git flow, podemos ejecutar los siguientes comandos:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -b feature_branch</span></span>
<span class="line"></span></code></pre></div><p>Pero cuando usamos la extensi\xF3n git-flow, solamente debemos ejecutar:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git flow feature start feature_branch</span></span>
<span class="line"></span></code></pre></div><p>Y continuamos usando git como siempre.</p><h3 id="terminar-features" tabindex="-1">Terminar features: <a class="header-anchor" href="#terminar-features" aria-hidden="true">#</a></h3><p>Una vez la caracter\xEDstica (regularmente tickets asignados en los proyectos), el siguiente paso ser\xEDa combinar la rama feature con la rama de desarrollo (develop).</p><p>Sin las extensiones de git flow, deber\xEDamos ejecutar los siguientes comandos:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge feature_branch</span></span>
<span class="line"></span></code></pre></div><p>Pero teniendo gitflow instalado, solamente necesitamos ejecutar:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git flow feature finish feature_branch</span></span>
<span class="line"></span></code></pre></div><p>Este comando har\xE1 autom\xE1ticamente el cambio hacia develop y luego el merge de la rama en la que estemos trabajando, y adicionalmente elimina la rama feature que ya no necesitamos.</p><h2 id="ramas-para-lanzamiento" tabindex="-1">Ramas para lanzamiento: <a class="header-anchor" href="#ramas-para-lanzamiento" aria-hidden="true">#</a></h2><p>Una vez la rama de desarrollo haya adquirido suficientes caracter\xEDsticas para un lanzamiento (o una fecha de lanzamiento est\xE1 cerca), se hace una divisi\xF3n (fork) de una rama de lanzamiento desde la rama develop. Al crear la rama se inicia un nuevo ciclo de lanzamiento, lo cual significa que en esta rama no deber\xEDan agregarse nuevas caracter\xEDsticas sino a la rama develop, sin embargo, si se encuentran errores en este punto, estos deber\xEDan ser corregidos y actualizados en la rama de lanzamiento tanto como en la rama de desarrollo.</p><p>Usar una rama dedicada a los lanzamientos hace posible que el equipo pueda pulir y revisar adecuadamente el proyecto sin afectar o detener el desarrollo de nuevas caracter\xEDsticas, esto tambi\xE9n nos permite crear fases bien definidas del desarrollo.</p><p>Para poder crear ramas de lanzamiento tambi\xE9n podemos hacerlo por nuestra cuenta, ejecutando los siguientes comandos:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -b release/0.1.0</span></span>
<span class="line"></span></code></pre></div><p>Pero si tenemos la extensi\xF3n git-flow, tambi\xE9n podemos hacer lo siguiente:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ git flow release start 0.1.0</span></span>
<span class="line"></span></code></pre></div><p>Lo cual nos dar\xE1 como respuesta lo siguiente:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Switched to a new branch </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">release/0.1.0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Una vez esta rama est\xE9 lista, (sin bugs, documentada y revisada), debe combinarse con la rama principal (master) y etiquetada con un n\xFAmero de versi\xF3n. Adicionalmente (no es obligacion) se sugiere que se haga merge a la rama develop por si hay alguna modificaci\xF3n que se haya realizado que necesite ser actualizada en la rama de desarrollo.</p><p>Para finalizar la rama de lanzamiento, podemos hacerlo, como siempre, de dos maneras, sin git-flow:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge release/0.1.0</span></span>
<span class="line"></span></code></pre></div><p>Con git-flow:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git flow release finish </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0.1.0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="ramas-de-mantenimiento-hotfix-branch" tabindex="-1">Ramas de mantenimiento (hotfix branch): <a class="header-anchor" href="#ramas-de-mantenimiento-hotfix-branch" aria-hidden="true">#</a></h2><p>Las ramas de mantenimiento o \u201Chotfix\u201D son ramas que nos ayudan a corregir lanzamientos ya en producci\xF3n, son muy parecidas a las ramas de lanzamiento excepto que ellas salen directamente de la rama master y no de develop. Nos ayudan a la hora de corregir errores peque\xF1os como faltas de ortograf\xEDas o una imagen que no se vea del todo bien. Una vez se haya finalizado el trabajo en esta rama, debe ser combinada de nuevo con master pero tambi\xE9n con develop para mantener todos los cambios en las ramas principales del proyecto.</p><h3 id="inicializar-una-rama-de-revision" tabindex="-1">Inicializar una rama de revisi\xF3n: <a class="header-anchor" href="#inicializar-una-rama-de-revision" aria-hidden="true">#</a></h3><p>Sin git flow:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -b hotfix_branch</span></span>
<span class="line"></span></code></pre></div><p>Con git-flow:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git flow hotfix start hotfix_branch</span></span>
<span class="line"></span></code></pre></div><p>De manera similar a como se finaliza una rama de lanzamiento, las ramas de revisi\xF3n se combinan en master y en develop, de la siguiente manera:</p><p>Sin git-flow:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge hotfix_branch</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge hotfix_branch</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch -D hotfix_branch</span></span>
<span class="line"></span></code></pre></div><p>Utilizando git flow</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ git flow hotfix finish hotfix_branch</span></span>
<span class="line"></span></code></pre></div><p>Este es b\xE1sicamente el flujo de trabajo que se sigue cuando se utiliza git flow, es muy ordenado y nos permite llevar un mejor seguimiento del trabajo hecho, y una linea de tiempo mas entendible evitando en lo posible los conflictos a la hora de combinar el trabajo hecho.</p>`,60),r=[l];function t(i,p,c,d,m,u){return s(),e("div",null,r)}const b=a(o,[["render",t]]);export{y as __pageData,b as default};
